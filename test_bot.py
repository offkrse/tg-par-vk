#!/usr/bin/env python3
import os
import asyncio
import logging
import random
import pandas as pd
import requests
import boto3
import aiohttp
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telethon import TelegramClient
from collections import defaultdict

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
PHONE = os.getenv("PHONE")
CHANNEL_NAME = os.getenv("CHANNEL_NAME")

S3_BUCKET = os.getenv("S3_BUCKET")
S3_ENDPOINT = os.getenv("S3_ENDPOINT")
S3_ACCESS_KEY = os.getenv("S3_ACCESS_KEY")
S3_SECRET_KEY = os.getenv("S3_SECRET_KEY")

# –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ CSV-–≤—Ö–æ–¥ –≤ .env
# VK_ACCESS_TOKENS = token1,token2,token3
VK_ACCESS_TOKENS = [t.strip() for t in os.getenv("VK_ACCESS_TOKEN", "").split(",") if t.strip()]

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# error bot
ERROR_BOT_TOKEN = os.getenv("ERROR_BOT_TOKEN")
ERROR_CHAT_ID = os.getenv("ERROR_CHAT_ID")

BASE_DATE = datetime(2025, 7, 14)
BASE_NUMBER = 53

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    filename="/opt/bot/bot_master.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# === S3 –∫–ª–∏–µ–Ω—Ç ===
s3 = boto3.client(
    "s3",
    endpoint_url=S3_ENDPOINT if S3_ENDPOINT else None,
    aws_access_key_id=S3_ACCESS_KEY,
    aws_secret_access_key=S3_SECRET_KEY
)

# === VK API URLs ===
BASE_URL_V3 = "https://ads.vk.com/api/v3"
BASE_URL_V2 = "https://ads.vk.com/api/v2"


# === –£—Ç–∏–ª–∏—Ç—ã ===
def send_error_sync(message: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ error-–±–æ—Ç–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ sync –∫–æ–¥–µ)."""
    if not ERROR_BOT_TOKEN or not ERROR_CHAT_ID:
        logging.warning(f"ERROR BOT not configured, would send: {message}")
        return
    try:
        resp = requests.post(
            f"https://api.telegram.org/bot{ERROR_BOT_TOKEN}/sendMessage",
            data={"chat_id": ERROR_CHAT_ID, "text": f"ERROR /bot_master.py : {message}"}
        )
        if resp.status_code != 200:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ error-bot: {resp.status_code} {resp.text}")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ –≤ error-bot: {e}")


async def send_error_async(message: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ async –∫–æ–¥–µ)."""
    if not ERROR_BOT_TOKEN or not ERROR_CHAT_ID:
        logging.warning(f"ERROR BOT not configured, would send: {message}")
        return
    try:
        async with aiohttp.ClientSession() as session:
            await session.post(
                f"https://api.telegram.org/bot{ERROR_BOT_TOKEN}/sendMessage",
                data={"chat_id": ERROR_CHAT_ID, "text": f"ERROR /bot_master.py : {message}"}
            )
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ send_error_async")
        # fallback to sync
        send_error_sync(message)


def get_day_number(today: datetime) -> int:
    delta = (today - BASE_DATE).days
    return BASE_NUMBER + delta


def get_output_filename(file_name: str, day_number: int):
    if "MFO5" in file_name:
        return f"–ë0 ({day_number}).txt", "–ë0"
    elif "6_web" in file_name:
        return None, "6_web"
    elif "broker" in file_name:
        return None, "broker"
    elif any(x in file_name for x in ["253", "345"]):
        return f"–ë1 ({day_number}).txt", "–ë1"
    else:
        return None, None


async def download_latest_csv(to_folder="/opt/bot/csv"):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç CSV —Ñ–∞–π–ª—ã –∏–∑ S3 –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É to_folder.
    –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã, —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏.
    """
    os.makedirs(to_folder, exist_ok=True)
    logging.info("üì• –°–∫–∞—á–∏–≤–∞–µ–º CSV –∏–∑ S3 –≤ %s", to_folder)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ /csv/
        response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix="csv/")
        contents = response.get("Contents", [])
        if not contents:
            logging.warning("‚ö†Ô∏è –í S3 –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ /csv/")
            return []

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∞—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        contents = sorted(contents, key=lambda x: x["LastModified"], reverse=True)[:7]

        seen_names = set()
        result_files = []
        today = datetime.today()
        date_suffix = today.strftime("(%d.%m)")

        for obj in contents:
            key = obj["Key"]
            if not key.endswith(".csv"):
                continue
            orig_name = os.path.basename(key)
            if orig_name in seen_names:
                logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∏–º–µ–Ω–∏: %s", orig_name)
                continue
            seen_names.add(orig_name)

            # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
            filename = orig_name.replace(".csv", f" {date_suffix}.csv")
            local_path = os.path.join(to_folder, filename)

            # —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ S3
            s3.download_file(S3_BUCKET, key, local_path)
            result_files.append(local_path)
            logging.info("‚úÖ –°–∫–∞—á–∞–Ω %s –∏–∑ S3", filename)

        return result_files

    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ CSV –∏–∑ S3: {e}"
        logging.exception(msg)
        await send_error_async(msg)
        return []


def broker_channel_group(cid: str, day_number: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞ –ø–æ channel_id"""
    cid = str(cid)
    mapping = {
        "–ö–† –î–û–ü_3": [915, 917, 918, 919],
        "–ö–† 1": [12063],
        "–ö–† 2": [11896],
        "–ö–† –î–û–ü_4": [3587, 7389, 7553, 8614, 8732],
        "–ö–† –î–û–ü_5": [9189, 9190, 9191, 9192, 9193, 9194, 9413, 9441, 9443, 9453, 9889, 9899],
        "–ö–† –î–û–ü_6": [10141, 10240],
        "–ö–† –î–û–ü_7": [11682, 11729],
        "–ö–† –î–û–ü_8": [12873],
        "–ö–† –î–û–ü_9": [16263],
    }
    for name, ids in mapping.items():
        if cid is None:
            continue
        if str(cid).isdigit() and int(cid) in ids:
            return f"{name} ({day_number}).txt"
    return f"–ö–† –î–û–ü_10 ({day_number}).txt"


def process_csv_files(files):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV -> TXT, –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö/–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö phone, —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–æ–≤."""
    today = datetime.today()
    day_number = get_day_number(today)
    output_data = defaultdict(set)

    for file in files:
        try:
            df = pd.read_csv(file)
            fname = os.path.basename(file)

            # –ü—Ä–æ–≤–µ—Ä–∫–∏: –ø—É—Å—Ç–æ–π, –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ phone –∏–ª–∏ –≤—Å–µ phone –ø—É—Å—Ç—ã
            if df.empty or "phone" not in df.columns or df["phone"].dropna().astype(str).str.strip().eq("").all():
                msg = f"–ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CSV: {fname}"
                logging.warning(msg)
                send_error_sync(msg)
                continue

            output_name, group_key = get_output_filename(fname, day_number)
            if not group_key:
                logging.info("–§–∞–π–ª %s –Ω–µ –ø–æ–¥–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫—É (–∏–º—è): %s", fname, group_key)
                continue

            if group_key == "broker":
                if "channel_id" not in df.columns:
                    msg = f"–í {fname} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç column 'channel_id'"
                    logging.warning(msg)
                    send_error_sync(msg)
                    continue
                for _, row in df.iterrows():
                    phone = str(row.get("phone", "")).replace("+", "").strip()
                    if not phone:
                        continue
                    cid = row.get("channel_id", "")
                    txt_name = broker_channel_group(cid, day_number)
                    output_data[txt_name].add(phone)

            elif group_key == "6_web":
                if "channel_id" not in df.columns:
                    msg = f"–í {fname} –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ channel_id"
                    logging.warning(msg)
                    send_error_sync(msg)
                    continue
                for _, row in df.iterrows():
                    phone = str(row.get("phone", "")).replace("+", "").strip()
                    if not phone:
                        continue
                    ch = str(row.get("channel_id", "")).strip()
                    if ch == "15883":
                        group = "–ë–ë"
                    elif ch == "15686":
                        group = "–ë–ë –î–û–ü_1"
                    elif ch == "15273":
                        group = "–ë–ë –î–û–ü_2"
                    else:
                        group = "–ë–ë –î–û–ü_3"
                    output_data[f"{group} ({day_number}).txt"].add(phone)

            else:
                phones = [str(p).replace("+", "").strip() for p in df["phone"].dropna()]
                phones = [p for p in phones if p]
                if not phones:
                    msg = f"–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ {fname}"
                    logging.warning(msg)
                    send_error_sync(msg)
                    continue
                if output_name:
                    output_data[output_name].update(phones)

        except Exception as e:
            msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file}: {e}"
            logging.exception(msg)
            send_error_sync(msg)

    os.makedirs("/opt/bot/txt", exist_ok=True)
    txt_files = []
    for name, phones in output_data.items():
        path = os.path.join("/opt/bot/txt", name)
        with open(path, "w", encoding="utf-8") as f:
            f.write("\n".join(sorted(phones)))
        txt_files.append(path)
        logging.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω TXT: %s (%d –Ω–æ–º–µ—Ä–æ–≤)", name, len(phones))
    return txt_files


async def send_file_to_telegram(file_path: str, chat_id: str = CHAT_ID):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram (–æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç)."""
    if not BOT_TOKEN or not chat_id:
        logging.warning("Telegram BOT_TOKEN or CHAT_ID not configured")
        return
    async with aiohttp.ClientSession() as session:
        try:
            with open(file_path, "rb") as f:
                form = aiohttp.FormData()
                form.add_field("chat_id", chat_id)
                form.add_field("document", f)
                async with session.post(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument", data=form
                ) as resp:
                    if resp.status != 200:
                        txt = await resp.text()
                        msg = f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {file_path}: {resp.status} {txt}"
                        logging.error(msg)
                        await send_error_async(msg)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram")
            await send_error_async(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram {file_path}: {e}")


def upload_to_s3(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3: txt -> /txt, csv -> /csv"""
    filename = os.path.basename(file_path)
    folder = "txt" if filename.lower().endswith(".txt") else "csv"
    key = f"{folder}/{filename}"
    try:
        s3.upload_file(file_path, S3_BUCKET, key)
        logging.info("–ó–∞–≥—Ä—É–∂–µ–Ω –≤ S3: %s", key)
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename} –≤ S3: {e}"
        logging.exception(msg)
        send_error_sync(msg)


def upload_user_list_vk(file_path, list_name, vk_token):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π VK –∫–∞–±–∏–Ω–µ—Ç (token).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list_id –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç Exception.
    –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    url = f"{BASE_URL_V3}/remarketing/users_lists.json"
    headers = {"Authorization": f"Bearer {vk_token}"}
    files = {"file": open(file_path, "rb")}
    data = {"name": list_name, "type": "phones"}

    logging.info(f"üì§ [VK_UPLOAD] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path} -> {url}")
    logging.info(f"  list_name={list_name}")
    logging.info(f"  headers={headers}")
    logging.info(f"  data={data}")

    try:
        resp = requests.post(url, headers=headers, files=files, data=data, timeout=60)
    except Exception as e:
        logging.exception(f"üö´ [VK_UPLOAD] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {e}")
        raise

    finally:
        files["file"].close()

    try:
        result = resp.json()
    except Exception:
        logging.error(f"üö´ [VK_UPLOAD] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç VK: {resp.text}")
        raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç VK: {resp.text}")

    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ VK-–æ—Ç–≤–µ—Ç–∞
    logging.info(f"üì© [VK_UPLOAD] –û—Ç–≤–µ—Ç VK status={resp.status_code}: {result}")

    if resp.status_code != 200 or isinstance(result.get("error"), dict):
        err_text = result.get("error_description") or str(result)
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ (HTTP {resp.status_code}): {err_text}")

    list_id = result.get("id")
    if not list_id:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–ø–∏—Å–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ VK: {result}")

    logging.info(f"‚úÖ [VK_UPLOAD] –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, list_id={list_id}")
    return list_id



def create_segment_vk(list_id, segment_name, vk_token):
    """–°–æ–∑–¥–∞—ë—Ç —Å–µ–≥–º–µ–Ω—Ç –≤ VK –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    url = f"{BASE_URL_V2}/remarketing/segments.json"
    headers = {"Authorization": f"Bearer {vk_token}", "Content-Type": "application/json"}
    payload = {
        "name": segment_name,
        "pass_condition": 1,
        "relations": [
            {"object_type": "remarketing_users_list", "params": {"source_id": list_id, "type": "positive"}}
        ],
    }
    resp = requests.post(url, headers=headers, json=payload, timeout=60)
    result = resp.json()
    if resp.status_code != 200 or isinstance(result.get("error"), dict):
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞: {result}")
    return result.get("id")


def generate_sharing_key_for_owner(object_type: str, object_id: int, vk_token):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç sharing key (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞) –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω."""
    url = f"{BASE_URL_V2}/sharing_keys.json"
    headers = {"Authorization": f"Bearer {vk_token}", "Content-Type": "application/json"}
    payload = {
        "sources": [{"object_type": object_type, "object_id": object_id}],
        "users": [],
        "send_email": False,
    }
    resp = requests.post(url, headers=headers, json=payload, timeout=60)
    try:
        result = resp.json()
    except Exception:
        raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç sharing_keys: {resp.text}")
    if resp.status_code != 200 or isinstance(result.get("error"), dict):
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sharing key: {result}")
    return result.get("sharing_key"), result.get("sharing_url")


async def upload_to_all_vk_and_get_one_sharing_key(file_path, vk_tokens):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ –∫–∞–∂–¥—ã–π VK –∫–∞–±–∏–Ω–µ—Ç –∏–∑ vk_tokens.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (first_success_list_id, first_token) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–¥–∏–Ω–æ–≥–æ sharing key.
    –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    file_name = os.path.basename(file_path)
    list_name = os.path.splitext(file_name)[0]
    segment_name = f"LAL {list_name}"

    logging.info(f"üì§ [VK_ALL_UPLOAD] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {file_name} –≤ {len(vk_tokens)} –∫–∞–±–∏–Ω–µ—Ç(–æ–≤) VK")

    first_success = None
    for token in vk_tokens:
        short_token = token[:10] + "..."  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Ç–æ–∫–µ–Ω
        try:
            logging.info(f"‚û°Ô∏è [VK_ALL_UPLOAD] –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å {file_name} —Å —Ç–æ–∫–µ–Ω–æ–º {short_token}")
            list_id = upload_user_list_vk(file_path, list_name, token)
            logging.info(f"‚úÖ [VK_ALL_UPLOAD] list_id={list_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {file_name} (token {short_token})")

            seg_id = create_segment_vk(list_id, segment_name, token)
            logging.info(f"‚úÖ [VK_ALL_UPLOAD] segment_id={seg_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {file_name} (token {short_token})")

            if first_success is None:
                first_success = (list_id, token)

        except Exception as e:
            msg = f"‚ùå [VK_ALL_UPLOAD] –û—à–∏–±–∫–∞ VK upload {file_name} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {short_token}: {e}"
            logging.exception(msg)
            send_error_sync(msg)
            # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª ‚Äî –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã

    if not first_success:
        logging.warning(f"‚ö†Ô∏è [VK_ALL_UPLOAD] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file_name} –Ω–∏ –≤ –æ–¥–∏–Ω VK –∫–∞–±–∏–Ω–µ—Ç.")
    else:
        logging.info(f"üéØ [VK_ALL_UPLOAD] –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π upload: list_id={first_success[0]}")

    return first_success



def order_txt_files(files):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ txt –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É.
    –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.
    """
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ ‚Äî –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    # –î–ª—è –ö–† –∏ –ë –ø—Ä–µ—Ñ–∏–∫—Å—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –¥–Ω—è, —É–±–µ—Ä—ë–º –µ–≥–æ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
    priority = [
        "–ö–† –î–û–ü_10", "–ö–† –î–û–ü_9", "–ö–† –î–û–ü_8", "–ö–† –î–û–ü_7", "–ö–† –î–û–ü_6",
        "–ö–† –î–û–ü_5", "–ö–† –î–û–ü_4", "–ö–† –î–û–ü_3", "–ö–† 2", "–ö–† 1",
        "–ë–ë –î–û–ü_3", "–ë–ë –î–û–ü_2", "–ë–ë", "–ë1", "–ë0"
    ]

    def key_for_path(p):
        name = os.path.basename(p)
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –≤–∏–¥–∞ " (NN).txt"
        base = name.rsplit(".", 1)[0]
        # –£–±–µ—Ä—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ " (—á–∏—Å–ª–æ)" –µ—Å–ª–∏ –µ—Å—Ç—å
        if base.endswith(")"):
            # —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ " (" –∏ –≤–∑—è—Ç—å –Ω–∞—á–∞–ª–æ
            parts = base.split(" (")
            base_short = parts[0]
        else:
            base_short = base
        # –î–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        try:
            idx = priority.index(base_short)
            return idx
        except ValueError:
            # –Ω–µ—Ç –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ ‚Äî —Å—Ç–∞–≤–∏–º –±–æ–ª—å—à–æ–π –∏–Ω–¥–µ–∫—Å (–ø–æ—Å–ª–µ –≤—Å–µ—Ö)
            return len(priority) + 1000

    return sorted([p for p in files], key=key_for_path)


async def process_previous_day_file():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ VK (–≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã) –∏ –≤ S3."""
    yesterday = datetime.today() - timedelta(days=1)
    file_path = f"/opt/leads_postback/data/leads_sub6_{yesterday.strftime('%d.%m.%Y')}.txt"
    if not os.path.exists(file_path):
        logging.info("–§–∞–π–ª leads_sub6 –∑–∞ –≤—á–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", file_path)
        return

    try:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º
        await send_file_to_telegram(file_path)
        # –∑–∞–ª–∏–≤–∞–µ–º –≤ VK –≤ –∫–∞–∂–¥—ã–π –∫–∞–±–∏–Ω–µ—Ç (–∏ —Å–æ–±–∏—Ä–∞–µ–º first_success –¥–ª—è –∫–ª—é—á–∞)
        first_success = None
        for token in VK_ACCESS_TOKENS:
            try:
                list_id = upload_user_list_vk(file_path, f"leads_sub6_{yesterday.strftime('%d.%m.%Y')}", token)
                create_segment_vk(list_id, f"LAL leads_sub6_{yesterday.strftime('%d.%m.%Y')}", token)
                if first_success is None:
                    first_success = (list_id, token)
            except Exception as e:
                msg = f"–û—à–∏–±–∫–∞ VK upload (leads_sub6) –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token[:8]}: {e}"
                logging.exception(msg)
                send_error_sync(msg)
        # –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3
        upload_to_s3(file_path)
        logging.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω leads_sub6: %s", file_path)
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å first_success
        return first_success
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ leads_sub6: {e}"
        logging.exception(msg)
        await send_error_async(msg)


# === –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ===
async def main():
    logging.info("=== üöÄ –ó–∞–ø—É—Å–∫ bot_master ===")

    # 1) –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª leads_sub6 –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    first_success_for_key = await process_previous_day_file()
    # first_success_for_key –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ (list_id, token)

    # 2) –°–∫–∞—á–∏–≤–∞–µ–º CSV –∏–∑ Telegram –≤ /opt/bot/csv
    csv_files = await download_latest_csv("/opt/bot/csv")
    if not csv_files:
        msg = "CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Telegram."
        logging.warning(msg)
        await send_error_async(msg)
        return

    # 3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV -> TXT
    txt_files = process_csv_files(csv_files)
    if not txt_files:
        msg = "–ù–µ –ø–æ–ª—É—á–∏–ª–∏ TXT —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV."
        logging.warning(msg)
        await send_error_async(msg)
        return

    # 4) –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ S3 (csv + txt)
    for f in csv_files + txt_files:
        try:
            upload_to_s3(f)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3")
            send_error_sync(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 {f}: {e}")

    # 5) –°–æ—Ä—Ç–∏—Ä—É–µ–º TXT —Ñ–∞–π–ª—ã –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É –ø–æ—Ä—è–¥–∫—É
    txt_files_ordered = order_txt_files(txt_files)

    # 6) –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π TXT –≤ –∫–∞–∂–¥—ã–π VK –∫–∞–±–∏–Ω–µ—Ç, –≤ –ø–æ—Ä—è–¥–∫–µ; —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π success –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sharing key
    first_success = first_success_for_key  # prefer leads_sub6 first_success if returned
    for txt in txt_files_ordered:
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É TXT: {txt}")
        await send_file_to_telegram(txt)

        try:
            res = await upload_to_all_vk_and_get_one_sharing_key(txt, VK_ACCESS_TOKENS)
            if res and first_success is None:
                first_success = res
            logging.info(f"‚úÖ VK –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {txt}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {res}")
        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {txt} –≤ VK: {e}")
            await send_error_async(f"–û—à–∏–±–∫–∞ VK upload –¥–ª—è {os.path.basename(txt)}: {e}")

        await asyncio.sleep(random.uniform(0.5, 1.5))




    # 7) –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π sharing key –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    if first_success:
        try:
            list_id_for_key, token_for_key = first_success
            sharing_key, sharing_url = generate_sharing_key_for_owner("users_list", int(list_id_for_key), token_for_key)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (BOT_TOKEN)
            if BOT_TOKEN and CHAT_ID:
                try:
                    resp = requests.post(
                        f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                        data={"chat_id": CHAT_ID,
                              "text": f"‚úÖ Sharing key —Å–æ–∑–¥–∞–Ω:\n{sharing_url}"}
                    )
                    if resp.status_code != 200:
                        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å sharing key –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: %s", resp.text)
                        send_error_sync(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å sharing key –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {resp.status_code} {resp.text}")
                except Exception as e:
                    logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ sharing key –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç")
                    send_error_sync(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ sharing key –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {e}")
            else:
                logging.warning("BOT_TOKEN/CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, sharing_url: %s", sharing_url)
                send_error_sync(f"Sharing key: {sharing_url}")
            logging.info("Sharing key —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s", sharing_url)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sharing key")
            send_error_sync(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sharing key: {e}")
    else:
        logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π list_id –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sharing key.")
        send_error_sync("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π list_id –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sharing key.")

    logging.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")


if __name__ == "__main__":
    asyncio.run(main())
