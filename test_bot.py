import os
import asyncio
import logging
import pandas as pd
import requests
import boto3
import aiohttp
from dotenv import load_dotenv
from datetime import datetime, timedelta
from collections import defaultdict

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
S3_BUCKET = os.getenv("S3_BUCKET")
S3_ENDPOINT = os.getenv("S3_ENDPOINT")
S3_ACCESS_KEY = os.getenv("S3_ACCESS_KEY")
S3_SECRET_KEY = os.getenv("S3_SECRET_KEY")

VK_TOKENS = os.getenv("VK_ACCESS_TOKEN").split(",")  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

ERROR_BOT_TOKEN = os.getenv("ERROR_BOT_TOKEN")
ERROR_CHAT_ID = os.getenv("ERROR_CHAT_ID")

BASE_DATE = datetime(2025, 7, 14)
BASE_NUMBER = 53

logging.basicConfig(
    filename="/opt/bot/bot_master.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# === S3 –∫–ª–∏–µ–Ω—Ç ===
s3 = boto3.client(
    "s3",
    endpoint_url=S3_ENDPOINT,
    aws_access_key_id=S3_ACCESS_KEY,
    aws_secret_access_key=S3_SECRET_KEY
)

BASE_URL_V3 = "https://ads.vk.com/api/v3"
BASE_URL_V2 = "https://ads.vk.com/api/v2"


# === –£—Ç–∏–ª–∏—Ç—ã ===
async def send_error(message: str):
    if not ERROR_BOT_TOKEN or not ERROR_CHAT_ID:
        return
    async with aiohttp.ClientSession() as session:
        await session.post(
            f"https://api.telegram.org/bot{ERROR_BOT_TOKEN}/sendMessage",
            data={"chat_id": ERROR_CHAT_ID, "text": f"ERROR /bot_master.py : {message}"}
        )


def get_day_number(today: datetime) -> int:
    return BASE_NUMBER + (today - BASE_DATE).days


def get_output_filename(file_name: str, day_number: int):
    if "MFO5" in file_name:
        return f"–ë0 ({day_number}).txt", "–ë0"
    elif "6_web" in file_name:
        return None, "6_web"
    elif "broker" in file_name:
        return None, "broker"
    elif any(x in file_name for x in ["253", "345"]):
        return f"–ë1 ({day_number}).txt", "–ë1"
    else:
        return None, None


def broker_channel_group(cid: str, day_number: int) -> str:
    cid = str(cid)
    mapping = {
        "–ö–† –î–û–ü_3": [915, 917, 918, 919],
        "–ö–† 1": [12063],
        "–ö–† 2": [11896],
        "–ö–† –î–û–ü_4": [3587, 7389, 7553, 8614, 8732],
        "–ö–† –î–û–ü_5": [9189, 9190, 9191, 9192, 9193, 9194, 9413, 9441, 9443, 9453, 9889, 9899],
        "–ö–† –î–û–ü_6": [10141, 10240],
        "–ö–† –î–û–ü_7": [11682, 11729],
        "–ö–† –î–û–ü_8": [12873],
        "–ö–† –î–û–ü_9": [16263]
    }
    for name, ids in mapping.items():
        if cid.isdigit() and int(cid) in ids:
            return f"{name} ({day_number}).txt"
    return f"–ö–† –î–û–ü_10 ({day_number}).txt"


# === –†–∞–±–æ—Ç–∞ —Å S3 ===
def download_csv_from_s3():
    os.makedirs("/opt/bot/csv", exist_ok=True)
    objects = s3.list_objects_v2(Bucket=S3_BUCKET).get("Contents", [])
    csv_files = []

    for obj in objects:
        key = obj["Key"]
        if not key.lower().endswith(".csv"):
            continue
        local_path = os.path.join("/opt/bot/csv", os.path.basename(key))
        s3.download_file(S3_BUCKET, key, local_path)
        logging.info(f"‚úÖ –°–∫–∞—á–∞–Ω –∏–∑ S3: {key}")
        csv_files.append(local_path)
    return csv_files


def process_csv_files(files):
    today = datetime.today()
    day_number = get_day_number(today)
    output_data = defaultdict(set)

    for file in files:
        try:
            df = pd.read_csv(file)
            fname = os.path.basename(file)
            if df.empty or "phone" not in df.columns or df["phone"].dropna().empty:
                msg = f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CSV: {fname}"
                logging.warning(msg)
                asyncio.run(send_error(msg))
                continue

            output_name, group_key = get_output_filename(fname, day_number)
            if not group_key:
                continue

            if group_key == "broker":
                if "channel_id" not in df.columns:
                    msg = f"‚ö†Ô∏è –í {fname} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç column 'channel_id'"
                    logging.warning(msg)
                    asyncio.run(send_error(msg))
                    continue
                for _, row in df.iterrows():
                    phone = str(row.get("phone", "")).replace("+", "").strip()
                    if not phone:
                        continue
                    cid = row.get("channel_id", "")
                    txt_name = broker_channel_group(cid, day_number)
                    output_data[txt_name].add(phone)

            elif group_key == "6_web":
                if "channel_id" not in df.columns:
                    msg = f"‚ö†Ô∏è –í {fname} –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ channel_id"
                    logging.warning(msg)
                    asyncio.run(send_error(msg))
                    continue
                for _, row in df.iterrows():
                    phone = str(row.get("phone", "")).replace("+", "").strip()
                    if not phone:
                        continue
                    ch = str(row.get("channel_id", "")).strip()
                    if ch == "15883":
                        group = "–ë–ë"
                    elif ch == "15686":
                        group = "–ë–ë –î–û–ü_1"
                    elif ch == "15273":
                        group = "–ë–ë –î–û–ü_2"
                    else:
                        group = "–ë–ë –î–û–ü_3"
                    output_data[f"{group} ({day_number}).txt"].add(phone)

            else:
                phones = [str(p).replace("+", "").strip() for p in df["phone"].dropna()]
                if output_name:
                    output_data[output_name].update(phones)

        except Exception as e:
            msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file}: {e}"
            logging.error(msg)
            asyncio.run(send_error(msg))

    os.makedirs("/opt/bot/txt", exist_ok=True)
    txt_files = []
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    order = [
        "leads_sub6",
        "–ö–† –î–û–ü_10", "–ö–† –î–û–ü_9", "–ö–† –î–û–ü_8", "–ö–† –î–û–ü_7",
        "–ö–† –î–û–ü_6", "–ö–† –î–û–ü_5", "–ö–† –î–û–ü_4", "–ö–† –î–û–ü_3",
        "–ö–† 2", "–ö–† 1",
        "–ë–ë –î–û–ü_3", "–ë–ë –î–û–ü_2", "–ë–ë", "–ë1", "–ë0"
    ]
    def sort_key(name):
        for idx, part in enumerate(order):
            if part in name:
                return idx
        return 999
    for name, phones in sorted(output_data.items(), key=lambda x: sort_key(x[0])):
        path = os.path.join("/opt/bot/txt", name)
        with open(path, "w", encoding="utf-8") as f:
            f.write("\n".join(sorted(phones)))
        txt_files.append(path)
        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω {name} ({len(phones)} –Ω–æ–º–µ—Ä–æ–≤)")
    return txt_files


async def send_file(file_path: str):
    async with aiohttp.ClientSession() as session:
        with open(file_path, "rb") as f:
            form = aiohttp.FormData()
            form.add_field("chat_id", CHAT_ID)
            form.add_field("document", f)
            async with session.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument", data=form
            ) as resp:
                if resp.status != 200:
                    txt = await resp.text()
                    msg = f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {txt}"
                    logging.error(msg)
                    await send_error(msg)


def upload_user_list(file_path, list_name, vk_token):
    url = f"{BASE_URL_V3}/remarketing/users_lists.json"
    headers = {"Authorization": f"Bearer {vk_token}"}
    files = {"file": open(file_path, "rb")}
    data = {"name": list_name, "type": "phones"}
    resp = requests.post(url, headers=headers, files=files, data=data)
    files["file"].close()
    result = resp.json()
    if resp.status_code != 200 or "error" in result:
        raise Exception(result)
    return result.get("id")


def create_segment_with_list(segment_name, list_id, vk_token):
    url = f"{BASE_URL_V2}/remarketing/segments.json"
    headers = {"Authorization": f"Bearer {vk_token}"}
    payload = {
        "name": segment_name,
        "pass_condition": 1,
        "relations": [
            {"object_type": "remarketing_users_list", "params": {"source_id": list_id, "type": "positive"}}
        ],
    }
    resp = requests.post(url, headers=headers, json=payload)
    result = resp.json()
    if resp.status_code != 200 or "error" in result:
        raise Exception(result)
    return result.get("id")


def generate_sharing_key(object_type: str, object_id: int, vk_token: str):
    url = f"{BASE_URL_V2}/sharing_keys.json"
    headers = {"Authorization": f"Bearer {vk_token}"}
    payload = {
        "sources": [{"object_type": object_type, "object_id": object_id}],
        "users": [],
        "send_email": False,
    }
    resp = requests.post(url, headers=headers, json=payload)
    result = resp.json()
    if resp.status_code != 200 or "error" in result:
        raise Exception(result)
    return result.get("sharing_url")


def upload_to_vk_ads(file_path):
    file_name = os.path.basename(file_path)
    list_name = os.path.splitext(file_name)[0]
    segment_name = f"LAL {list_name}"
    for vk_token in VK_TOKENS:
        try:
            list_id = upload_user_list(file_path, list_name, vk_token)
            create_segment_with_list(segment_name, list_id, vk_token)
            logging.info(f"üì§ {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ VK Ads (ID={list_id})")
        except Exception as e:
            msg = f"–û—à–∏–±–∫–∞ VK upload {file_name}: {e}"
            logging.error(msg)
            asyncio.run(send_error(msg))
    # –æ–±—â–∏–π sharing key –¥–ª—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω)
    try:
        first_list_id = upload_user_list(file_path, list_name, VK_TOKENS[0])
        sharing_url = generate_sharing_key("users_list", first_list_id, VK_TOKENS[0])
        asyncio.run(send_file_to_main_bot(sharing_url))
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sharing key: {e}"
        logging.error(msg)
        asyncio.run(send_error(msg))


async def send_file_to_main_bot(url: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ sharing key –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É"""
    async with aiohttp.ClientSession() as session:
        await session.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            data={"chat_id": CHAT_ID, "text": f"üîë Sharing key: {url}"}
        )


def upload_to_s3(file_path):
    filename = os.path.basename(file_path)
    folder = "txt" if filename.endswith(".txt") else "csv"
    try:
        s3.upload_file(file_path, S3_BUCKET, f"{folder}/{filename}")
        logging.info(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {folder}/{filename}")
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename} –≤ S3: {e}"
        logging.error(msg)
        asyncio.run(send_error(msg))


async def main():
    logging.info("=== üöÄ bot_master –∑–∞–ø—É—â–µ–Ω ===")

    # === –°–∫–∞—á–∏–≤–∞–µ–º CSV –∏–∑ S3 ===
    csv_files = download_csv_from_s3()
    if not csv_files:
        msg = "‚ö†Ô∏è CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ S3"
        logging.warning(msg)
        await send_error(msg)
        return

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV ‚Üí TXT ===
    txt_files = process_csv_files(csv_files)

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3 ===
    for f in csv_files + txt_files:
        upload_to_s3(f)

    # === VK Ads –∏ Telegram ===
    for txt in txt_files:
        upload_to_vk_ads(txt)
        await send_file(txt)

    logging.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")


if __name__ == "__main__":
    asyncio.run(main())
