import os
import asyncio
import random
import time
import logging
from datetime import datetime
from collections import defaultdict
import pandas as pd
import boto3
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from vk_api import VkApi
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()

# === Telegram ===
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
PHONE = os.getenv("PHONE")
CHANNEL_NAME = os.getenv("CHANNEL_NAME")

# === VK ===
VK_ACCESS_TOKEN = os.getenv("VK_ACCESS_TOKEN")
VK_ACCOUNT_ID = os.getenv("VK_ACCOUNT_ID")

# === S3 ===
S3_ENDPOINT = os.getenv("S3_ENDPOINT")
S3_BUCKET = os.getenv("S3_BUCKET")
S3_ACCESS_KEY = os.getenv("S3_ACCESS_KEY")
S3_SECRET_KEY = os.getenv("S3_SECRET_KEY")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
BASE_DATE = datetime(2025, 7, 14)
BASE_NUMBER = 53
DOWNLOAD_DIR = "/opt/bot"

os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    filename="/opt/bot/bot_master.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç ===
def get_day_number(today: datetime):
    delta = (today - BASE_DATE).days
    return BASE_NUMBER + delta


def get_output_filename(file_name, day_number):
    if "MFO5" in file_name:
        return f"–ë0 ({day_number}).txt", "–ë0"
    elif "6_web" in file_name:
        return None, "6_web"
    elif any(name in file_name for name in ["253", "345"]):
        return f"–ë1 ({day_number}).txt", "–ë1"
    elif "389" in file_name:
        return f"–ù1 ({day_number}).txt", "–ù1"
    elif "390" in file_name:
        return f"–ù2 ({day_number}).txt", "–ù2"
    else:
        return None, None


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
if not all([S3_ENDPOINT, S3_BUCKET, S3_ACCESS_KEY, S3_SECRET_KEY]):
    raise SystemExit("‚ùå –û—à–∏–±–∫–∞: S3 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

s3 = boto3.client(
    "s3",
    endpoint_url=S3_ENDPOINT if S3_ENDPOINT.startswith("http") else f"https://{S3_ENDPOINT}",
    aws_access_key_id=S3_ACCESS_KEY,
    aws_secret_access_key=S3_SECRET_KEY,
)

vk = VkApi(token=VK_ACCESS_TOKEN).get_api()


# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV –∏–∑ Telegram ===
async def download_csv_from_tg():
    client = TelegramClient("session", API_ID, API_HASH)
    await client.connect()

    if not await client.is_user_authorized():
        await client.send_code_request(PHONE)
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
        await client.sign_in(PHONE, code)
        try:
            await client.sign_in(PHONE, code)
        except SessionPasswordNeededError:
            pw = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            await client.sign_in(password=pw)

    logging.info(f"üì• –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ {CHANNEL_NAME}...")
    entity = await client.get_entity(CHANNEL_NAME)
    messages = await client.get_messages(entity, limit=20)

    downloaded_files = []

    for msg in messages:
        if msg.file and msg.file.name and msg.file.name.endswith(".csv"):
            filename = msg.file.name
            save_path = os.path.join(DOWNLOAD_DIR, filename)
            if not os.path.exists(save_path):
                await msg.download_media(file=save_path)
                downloaded_files.append(save_path)
                logging.info(f"‚úÖ –°–∫–∞—á–∞–Ω {filename}")
                time.sleep(random.uniform(1, 3))

    await client.disconnect()
    return downloaded_files


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV –≤ TXT ===
def process_csv_to_txt():
    today = datetime.today()
    day_number = get_day_number(today)
    output_data = defaultdict(list)

    all_files = [f for f in os.listdir(DOWNLOAD_DIR) if f.endswith(".csv")]
    if not all_files:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç CSV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return []

    for file in all_files:
        path = os.path.join(DOWNLOAD_DIR, file)
        try:
            df = pd.read_csv(path)
            fname = os.path.basename(file)
            output_name, group_key = get_output_filename(fname, day_number)

            # === –õ–æ–≥–∏–∫–∞ –¥–ª—è 6_web ===
            if group_key == "6_web":
                if "channel_id" not in df.columns:
                    logging.error(f"‚ùå –ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ channel_id –≤ {fname}")
                    continue
                for _, row in df.iterrows():
                    phone = str(row["phone"]).replace("+", "").strip()
                    if not phone:
                        continue
                    ch = str(row["channel_id"]).strip()
                    if ch == "15883":
                        group = "–ë–ë"
                    elif ch == "15686":
                        group = "–ë–ë –î–û–ü_1"
                    elif ch == "15273":
                        group = "–ë–ë –î–û–ü_2"
                    else:
                        group = "–ë–ë –î–û–ü_3"
                    output_data[group].append(phone)
            else:
                if "phone" not in df.columns:
                    logging.error(f"‚ùå –ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ phone –≤ {fname}")
                    continue
                phones = df["phone"].dropna().astype(str)
                cleaned = [p.replace("+", "").strip() for p in phones if p.strip()]
                if output_name:
                    output_data[group_key].extend(cleaned)
            logging.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω {fname}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file}: {e}")

    # === –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º TXT ===
    saved_txt = []
    for group, phones in output_data.items():
        unique_phones = sorted(set(phones))
        filename = f"{group} ({day_number}).txt"
        path = os.path.join(DOWNLOAD_DIR, filename)
        with open(path, "w", encoding="utf-8") as f:
            f.write("\n".join(unique_phones))
        saved_txt.append(path)
        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω {filename} ({len(unique_phones)} –Ω–æ–º–µ—Ä–æ–≤)")
    return saved_txt


# === –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ S3 ===
def upload_to_s3(file_path):
    filename = os.path.basename(file_path)
    try:
        s3.upload_file(file_path, S3_BUCKET, filename)
        logging.info(f"‚òÅÔ∏è –ó–∞–ª–∏—Ç –≤ S3: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename} –≤ S3: {e}")


# === –ó–∞–≥—Ä—É–∑–∫–∞ TXT –≤ VK Ads ===
def upload_to_vk_ads(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            phones = [line.strip() for line in f.readlines() if line.strip()]

        vk.ads.importTargetContacts(
            account_id=VK_ACCOUNT_ID,
            target_group_id=1,  # ‚ö†Ô∏è –ü–æ–¥—Å—Ç–∞–≤—å ID —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã
            contacts="\n".join(phones),
        )
        logging.info(f"üì§ –ó–∞–ª–∏—Ç {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –≤ VK Ads ({os.path.basename(file_path)})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path} –≤ VK Ads: {e}")


# === –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ bot_master")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º CSV
    csv_files = await download_csv_from_tg()

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
    today = datetime.today()
    date_tag = f"({today.day:02d}.{today.month:02d})"
    renamed_files = []
    for fpath in csv_files:
        dirname, fname = os.path.split(fpath)
        name, ext = os.path.splitext(fname)
        new_name = f"{name} {date_tag}{ext}"
        new_path = os.path.join(dirname, new_name)
        os.rename(fpath, new_path)
        renamed_files.append(new_path)
        logging.info(f"üì¶ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω {fname} ‚Üí {new_name}")

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV ‚Üí TXT
    txt_files = process_csv_to_txt()

    # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ S3
    for f in renamed_files + txt_files:
        upload_to_s3(f)

    # 5. –ó–∞–≥—Ä—É–∑–∫–∞ TXT –≤ VK
    for f in txt_files:
        upload_to_vk_ads(f)

    # 6. –û—á–∏—Å—Ç–∫–∞
    for f in renamed_files + txt_files:
        try:
            os.remove(f)
            logging.info(f"üßπ –£–¥–∞–ª—ë–Ω {os.path.basename(f)}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {f}: {e}")

    logging.info("‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")


if __name__ == "__main__":
    asyncio.run(main())
